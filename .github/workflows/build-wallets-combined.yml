name: Build BrrrFren Wallets (Combined)

on:
  push:
    branches:
      - stable-build
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - stable-build

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    
    env:
      MAKEJOBS: "-j3"
      CCACHE_SIZE: "100M"
      CCACHE_TEMPDIR: /tmp/.ccache-temp
      CCACHE_COMPRESS: "1"
      WINEDEBUG: fixme-all
      SDK_URL: https://depends.dogecoincore.org

    strategy:
      fail-fast: false
      matrix:
        name: [x86_64-linux, x86_64-win]
        include:
          - name: x86_64-linux
            os: ubuntu-22.04
            host: x86_64-unknown-linux-gnu
            packages: python3
            
          - name: x86_64-win
            os: windows-latest
            host: x86_64-w64-mingw32
            packages: python3 nsis g++-mingw-w64-x86-64 wine64 bc wine-binfmt
            postinstall: |
              sudo update-alternatives --set x86_64-w64-mingw32-gcc  /usr/bin/x86_64-w64-mingw32-gcc-posix
              sudo update-alternatives --set x86_64-w64-mingw32-g++  /usr/bin/x86_64-w64-mingw32-g++-posix
            dep-opts: ""
            config-opts: "--enable-gui=qt5"
            goal: install

    steps:
      # Linux-specific steps
      - name: Cache Linux dependencies
        if: matrix.name == 'x86_64-linux'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/apt
            ~/.local/share/vcpkg
          key: ${{ matrix.os }}-deps-${{ hashFiles('**/configure.ac') }}
          restore-keys: |
            ${{ matrix.os }}-deps-
            
      - name: Install base packages (Linux)
        if: matrix.name == 'x86_64-linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libtool autotools-dev automake \
               pkg-config bsdmainutils curl ca-certificates ccache rsync git \
               procps bison python3 \
               libevent-dev libssl-dev \
               libboost-system-dev libboost-filesystem-dev libboost-thread-dev libboost-chrono-dev \
               libboost-iostreams-dev libboost-program-options-dev libboost-test-dev \
               qtbase5-dev qttools5-dev-tools protobuf-compiler \
               libqrencode-dev libminiupnpc-dev libdb++-dev

      # Windows-specific steps
      - name: Install base packages (Windows)
        if: matrix.name == 'x86_64-win'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libtool autotools-dev automake \
               pkg-config bsdmainutils curl ca-certificates ccache rsync git \
               procps bison python3
          sudo apt-get install -y ${{ matrix.packages }}

      - name: Post install (Windows)
        if: matrix.name == 'x86_64-win' && matrix.postinstall
        run: ${{ matrix.postinstall }}

      # Common steps
      - name: Checkout code
        uses: actions/checkout@v4

      # Windows depends build
      - name: Dependency cache (Windows)
        if: matrix.name == 'x86_64-win'
        uses: actions/cache@v4
        with:
          path: ./depends/built
          key: ${{ matrix.name }}-depends-${{ hashFiles('depends/packages/*') }}

      - name: Build depends (Windows)
        if: matrix.name == 'x86_64-win'
        run: |
          make $MAKEJOBS -C depends HOST=${{ matrix.host }} ${{ matrix.dep-opts }}

      # Linux build
      - name: Build BrrrFren (Linux)
        if: matrix.name == 'x86_64-linux'
        run: |
          ./autogen.sh
          # Add -fPIC to ensure all object files are compiled as position-independent code for shared libraries
          export CXXFLAGS="-fPIC"
          ./configure --enable-static --with-pic --with-incompatible-bdb --with-qt=yes
          make -j$(nproc)
          
          # Create distribution directory
          mkdir -p dist
          
          # Check what binaries were actually created
          echo "=== Checking what binaries exist in src/ ==="
          ls -la src/ | grep -E "(dogecoind|dogecoin|brrrfren|poem)"
          
          # Copy binaries with appropriate renaming
          if [ -f src/dogecoind ]; then
            strip src/dogecoind src/dogecoin-cli src/dogecoin-tx
            cp src/dogecoind src/dogecoin-cli src/dogecoin-tx dist/
            # Copy Qt GUI wallet if built
            if [ -f src/qt/dogecoin-qt ]; then
              strip src/qt/dogecoin-qt
              cp src/qt/dogecoin-qt dist/poem-qt
              echo "✅ Successfully copied and renamed GUI wallet from dogecoin-qt to poem-qt"
            elif [ -f src/qt/poem-qt ]; then
              strip src/qt/poem-qt
              cp src/qt/poem-qt dist/
              echo "✅ Successfully copied GUI wallet (poem-qt)"
            else
              echo "⚠️ No GUI wallet binary found in src/qt/"
              ls -la src/qt/
            fi
          else
            echo "ERROR: Could not find expected binaries!"
            ls -la src/
            exit 1
          fi

      # Windows build using depends
      - name: CCache (Windows)
        if: matrix.name == 'x86_64-win'
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ matrix.name }}-ccache-${{ hashFiles('**/configure.ac') }}

      - name: Build BrrrFren (Windows)
        if: matrix.name == 'x86_64-win'
        run: |
          depends/${{ matrix.host }}/native/bin/ccache --max-size=$CCACHE_SIZE || true
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/${{ matrix.host }} ${{ matrix.config-opts }} || ( cat config.log && false)
          make $MAKEJOBS ${{ matrix.goal }} || ( echo "Build failure. Verbose build follows." && make ${{ matrix.goal }} V=1 ; false )

      - name: Rename binaries (Windows)
        if: matrix.name == 'x86_64-win'
        run: |
          # Create distribution directory
          mkdir -p dist
          
          # Copy and rename Windows binaries
          if [ -f src/dogecoind.exe ]; then
            cp src/dogecoind.exe dist/poemd.exe
            cp src/dogecoin-cli.exe dist/poem-cli.exe
            cp src/dogecoin-tx.exe dist/poem-tx.exe
            [ -f src/qt/dogecoin-qt.exe ] && cp src/qt/dogecoin-qt.exe dist/poem-qt.exe
            echo "✅ Successfully renamed Windows binaries"
          else
            echo "ERROR: Could not find expected Windows binaries!"
            ls -la src/
            exit 1
          fi
          
          # Copy required DLLs
          echo "Copying required DLLs..."
          cp depends/x86_64-w64-mingw32/bin/*.dll dist/ || true
          
          # List all files in dist for verification
          echo "=== Files in dist/ ==="
          ls -la dist/

      # Package binaries
      - name: Package binaries
        run: |
          if [ "${{ matrix.name }}" = "x86_64-linux" ]; then
            cd dist
            tar -czvf ../brrrfren-linux-x64.tar.gz *
            cd ..
            echo "ASSET_NAME=brrrfren-linux-x64.tar.gz" >> $GITHUB_ENV
          elif [ "${{ matrix.name }}" = "x86_64-win" ]; then
            cd dist
            7z a -r ../brrrfren-windows-x64.zip *
            cd ..
            echo "ASSET_NAME=brrrfren-windows-x64.zip" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Generate checksums
        run: |
          if [ "${{ matrix.name }}" = "x86_64-linux" ]; then
            sha256sum brrrfren-linux-x64.tar.gz > brrrfren-linux-x64.tar.gz.sha256
          elif [ "${{ matrix.name }}" = "x86_64-win" ]; then
            sha256sum brrrfren-windows-x64.zip > brrrfren-windows-x64.zip.sha256
          fi
        shell: bash

      - name: Upload binaries to release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.ASSET_NAME }}
            ${{ env.ASSET_NAME }}.sha256
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
