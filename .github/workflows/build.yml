name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Cache Linux dependencies
      if: matrix.os == 'ubuntu-22.04'
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/apt
          ~/.local/share/vcpkg
        key: ${{ matrix.os }}-deps-${{ hashFiles('**/configure.ac') }}
        restore-keys: |
          ${{ matrix.os }}-deps-

    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential libtool autotools-dev automake pkg-config \
          libevent-dev libssl-dev \
          libboost-all-dev \
          qtbase5-dev qttools5-dev-tools protobuf-compiler \
          libqrencode-dev libminiupnpc-dev libdb++-dev
        
        # Verify Boost headers are installed
        echo "=== Verifying Boost headers ==="
        ls -la /usr/include/boost/type_traits/is_standard_layout.hpp || echo "ERROR: Boost headers not found!"
        dpkg -L libboost-dev | grep -i type_traits || echo "WARNING: Boost type_traits not found!"
        echo "Boost version: $(grep '#define BOOST_LIB_VERSION' /usr/include/boost/version.hpp 2>/dev/null || echo 'Boost version not found')"

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          git
          base-devel
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-autotools
          mingw-w64-x86_64-pkg-config
          mingw-w64-x86_64-boost
          mingw-w64-x86_64-boost-libs
          mingw-w64-x86_64-libevent
          mingw-w64-x86_64-db
          mingw-w64-x86_64-openssl
          mingw-w64-x86_64-qt5-base
          mingw-w64-x86_64-qt5-tools
          mingw-w64-x86_64-protobuf
          mingw-w64-x86_64-qrencode
          mingw-w64-x86_64-miniupnpc

    - name: Verify Boost installation
      if: matrix.os == 'ubuntu-22.04'
      run: |
        # Verify Boost headers are present
        echo "=== Verifying Boost installation ==="
        if [ ! -f /usr/include/boost/type_traits/is_standard_layout.hpp ]; then
          echo "ERROR: Boost headers not found in expected location"
          echo "Please ensure libboost-all-dev is installed"
          exit 1
        fi
        echo "✓ Boost headers verified"

    - name: Verify policy directory
      if: matrix.os == 'ubuntu-22.04'
      run: |
        # Initialize submodules if they exist
        if [ -f .gitmodules ]; then
          echo "=== Initializing submodules ==="
          git submodule update --init --recursive
        fi
        
        # Verify policy directory and required headers
        echo "=== Verifying policy directory ==="
        local missing=0
        for header in "src/policy/feerate.h" "src/policy/policy.h"; do
          if [ ! -f "$header" ]; then
            echo "ERROR: Missing required header: $header"
            missing=1
          fi
        done
        
        if [ $missing -ne 0 ]; then
          echo "Please ensure the policy directory is properly set up with all required headers."
          echo "You may need to copy the policy directory from Bitcoin Core's source."
          exit 1
        fi
        echo "✓ Policy headers verified"
        
        # Clean any previous build artifacts
        make distclean || true
        
        # Regenerate build system
        if [ -f autogen.sh ]; then
          ./autogen.sh
        fi
        
        # Configure with necessary flags
        ./configure \
          --enable-static \
          --disable-shared \
          --with-pic \
          --with-incompatible-bdb \
          --with-qt=no \
          --disable-tests \
          --disable-bench \
          --disable-wallet \
          --disable-zmq \
          CPPFLAGS="-DHAVE_CONFIG_H -I$(pwd)/src"
        
        # Build with verbose output
        make V=1 -j$(nproc) || make V=1
        
        echo "=== Checking what binaries exist in src/ ==="
        ls -la src/ | grep -E "(dogecoind|dogecoin|brrrfren|brrrfren)"
        
        if [ -f src/poemd ]; then
          strip src/poemd src/poem-cli src/poem-tx
          mkdir -p dist
          cp src/poemd src/poem-cli src/poem-tx dist/
        elif [ -f src/dogecoind ]; then
          strip src/dogecoind src/dogecoin-cli src/dogecoin-tx
          mkdir -p dist
          cp src/dogecoind src/dogecoin-cli src/dogecoin-tx dist/
        else
          echo "ERROR: Could not find expected binaries!"
          ls -la src/
          exit 1
        fi

    - name: Build (Windows)
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: |
        ./autogen.sh
        
        # Work around MSYS2 missing libboost_system-mt.a issue
        echo "Working around missing libboost_system-mt.a in MSYS2..."
        if [ ! -f /mingw64/lib/libboost_system-mt.a ]; then
          echo "Creating dummy libboost_system-mt.a (header-only in boost 1.88)"
          ar crs /mingw64/lib/libboost_system-mt.a
        fi
        
        # Set boost environment variables
        export BOOST_ROOT=/mingw64
        export BOOST_INCLUDEDIR=/mingw64/include
        export BOOST_LIBRARYDIR=/mingw64/lib
        export BOOST_SYSTEM_LIB=boost_system-mt
        export BOOST_FILESYSTEM_LIB=boost_filesystem-mt
        export BOOST_THREAD_LIB=boost_thread-mt
        export BOOST_CHRONO_LIB=boost_chrono-mt
        export BOOST_PROGRAM_OPTIONS_LIB=boost_program_options-mt
        export BOOST_UNIT_TEST_FRAMEWORK_LIB=boost_unit_test_framework-mt
        
        # Force configure to accept that boost_system is available
        export ax_cv_boost_system=yes
        
        # Set C++17 + disable tests + add missing Windows libs
        export CXXFLAGS="-g -O2 -std=c++17"
        export LDFLAGS="-lbcrypt"
        
        ./configure \
          CPPFLAGS="-I${BOOST_INCLUDEDIR}" \
          LDFLAGS="-L${BOOST_LIBRARYDIR} ${LDFLAGS}" \
          CXXFLAGS="${CXXFLAGS}" \
          --enable-static --disable-shared --with-pic \
          --with-incompatible-bdb --with-qt=no \
          --disable-tests --disable-bench \
          --with-boost="${BOOST_ROOT}"
          
        make -j$(nproc)
        
        echo "=== Checking what binaries exist in src/ ==="
        ls -la src/ | grep -E "\.exe$"
        
        if [ -f src/poemd.exe ]; then
          strip src/poemd.exe src/poem-cli.exe src/poem-tx.exe
          mkdir -p dist
          cp src/poemd.exe src/poem-cli.exe src/poem-tx.exe dist/
        elif [ -f src/dogecoind.exe ]; then
          strip src/dogecoind.exe src/dogecoin-cli.exe src/dogecoin-tx.exe
          mkdir -p dist
          cp src/dogecoind.exe src/dogecoin-cli.exe src/dogecoin-tx.exe dist/
        else
          echo "ERROR: Could not find expected binaries!"
          ls -la src/
          exit 1
        fi

    - name: Package binaries
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-22.04" ]; then
          cd dist
          tar -czf ../poem-linux-x64.tar.gz *
          cd ..
          echo "ASSET_NAME=poem-linux-x64.tar.gz" >> $GITHUB_ENV
        else
          cd dist
          7z a ../poem-windows-x64.zip *
          cd ..
          echo "ASSET_NAME=poem-windows-x64.zip" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Generate checksums
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-22.04" ]; then
          sha256sum poem-linux-x64.tar.gz > poem-linux-x64.tar.gz.sha256
        else
          sha256sum poem-windows-x64.zip > poem-windows-x64.zip.sha256
        fi
      shell: bash

    - name: Upload binaries to release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ env.ASSET_NAME }}
          ${{ env.ASSET_NAME }}.sha256
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
