name: PoEM Core Build

on:
  push:
    branches: [ "main", "master", "dev", "develop", "release/*", "fix-build" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build with debugging enabled'
        type: boolean
        required: false
        default: false

jobs:
  build-linux:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Cache Linux dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/apt
          ~/.local/share/vcpkg
        key: ${{ runner.os }}-deps-${{ hashFiles('**/configure.ac') }}
        restore-keys: |
          ${{ runner.os }}-deps-
    
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          libtool \
          autotools-dev \
          automake \
          pkg-config \
          libevent-dev \
          libssl-dev \
          libboost-all-dev \
          libboost-system-dev \
          libboost-filesystem-dev \
          libboost-thread-dev \
          libboost-chrono-dev \
          libboost-iostreams-dev \
          libboost-program-options-dev \
          libboost-test-dev \
          libboost-type-erasure-dev \
          libboost-signals-dev \
          libboost-date-time-dev \
          libboost-regex-dev \
          qtbase5-dev \
          qttools5-dev-tools \
          libqt5svg5-dev \
          protobuf-compiler \
          libprotobuf-dev \
          libqrencode-dev \
          libminiupnpc-dev \
          libdb++-dev \
          libdb5.3++-dev \
          bsdmainutils \
          libzmq3-dev \
          libsqlite3-dev \
          libqt5gui5
    
    - name: Build
      run: |
        ./autogen.sh
        ./configure \
          --enable-static \
          --disable-shared \
          --with-pic \
          --with-incompatible-bdb \
          --with-qt=no \
          --disable-tests \
          --disable-bench \
          --disable-wallet \
          --disable-zmq
        
        make -j$(nproc)
        
        # Check for built binaries
        echo "=== Checking what binaries exist in src/ ==="
        ls -la src/ | grep -E "(poemd|poem)"
        
        # Create dist directory and copy binaries
        mkdir -p dist
        if [ -f src/poemd ]; then
          strip src/poemd src/poem-cli src/poem-tx
          cp src/poemd src/poem-cli src/poem-tx dist/
        elif [ -f src/dogecoind ]; then
          strip src/dogecoind src/dogecoin-cli src/dogecoin-tx
          cp src/dogecoind src/dogecoin-cli src/dogecoin-tx dist/
        else
          echo "ERROR: Could not find expected binaries!"
          ls -la src/
          exit 1
        fi
    
    - name: Upload Binary
      uses: actions/upload-artifact@v4
      with:
        name: poem-linux-binaries
        path: dist/
        if-no-files-found: error
        retention-days: 5
